#####################
# Macros and Tables #
#####################

### Interface devices ###
if_lo = "lo0"
if_wan = "vr0"
if_lan = "vr1"
if_tun = "{ tun0 tun2 }"
if_tap = "tun1"

### Subnets and address ranges ###
# IPv4 loopback
net_lo      = "127.0.0.0/8"
# IPv4 multicast
multicast   = "224.0.0.0/4"
# All the private addresses that fall under our purview
net_private = "10.19.0.0/16"
# LAN subnet (as opposed to other subnets under our control, such as VPN
# subnets)
net_lan     = "10.19.0.0/17"

### Hosts ###
host_modem = "192.168.100.1"
host_noatun = "10.19.1.1"
host_ps3 = "10.19.1.3"

### Port-based access control ###
# Allowed TCP ports from Internet (ssh treated separately, below)
ports_in_tcp = "{ auth 1194 5001 }"
# Allowed UDP ports from Internet
ports_in_udp = "{ ntp 1194 1195 }"

### Abstract service / application port definitions ###
srv_tcp_im = "{ 1863 5190 5220 5222 5223 }"
srv_tcp_http = "{ 80 8080 8888 }"
srv_tcp_mail = "{ 21 25 110 587 995 }"

### Address tables ###
# Address groups which shouldn't be in circulation on the Internet
table <martians> const { 127.0.0.0/8 192.168.0.0/16 172.16.0.0/12 \
    10.0.0.0/8 169.254.0.0/16 192.0.2.0/24 0.0.0.0/8 }

# Table of ddresses that have attempted to brute-force attack our SSH
# service from the Internet, for blocking purposes.
table <wan_bruteforce> persist


###########
# Options #
###########

# Strictly associate connection states with network interfaces
set state-policy if-bound

# Reject disallowed TCP and UDP connections with an RST or ICMP UNREACHABLE
# packet, respectively
set block-policy return

# Log packet- and byte-count statistics for our Internet connection
set loginterface $if_wan

# You gotta have loopback...
set skip on $if_lo

# So that we can use urpf-failed rule even with the OpenVPN bridge
set skip on $if_tap


#########################
# Traffic Normalization #
#########################

# Replace TCP timestamps and IP identification fields with random values to
# compensate for less secure values that may be generated by other hosts.
# Also, lower the MSS for traversing TCP connections to 1440 because our
# PPPoE interface's MTU is lower than that of clients' LAN interfaces.
#match on $if_wan scrub (reassemble tcp random-id max-mss 1440)
match on $if_wan scrub (reassemble tcp random-id)

#altq on $if_wan bandwidth 280000b hfsc (linkshare 280000b upperlimit 280000b) queue { upstream }
#queue upstream bandwidth 99% priority 0 qlimit 10 hfsc (default)


###############
# Translation #
###############

# NAT
match out on $if_wan from $net_private to !(if_wan) nat-to ($if_wan)


####################
# Packet Filtering #
####################

# Block everything unless we say otherwise
block all

# Prevent loopback address spoofing
antispoof quick for $if_lo

# Prevent spoofing where an antispoof rule wouldn't be a robust choice.
# However, this is incompatible with the bridged tap device configuration
# used for OpenVPN unless we set skip on one of the bridged interfaces.
block drop in quick from urpf-failed

# FTP proxy anchor
anchor "ftp-proxy/*"

### WAN interface ###

## Ingress
# Allow SSH access, but block any communications from hosts found trying to
# brute-force the SSH server...
block drop in quick on $if_wan inet from <wan_bruteforce>
pass in quick on $if_wan inet proto tcp from any to ($if_wan) \
    port 22 flags S/SFRA modulate state \
    (max-src-conn-rate 3/30, overload <wan_bruteforce> flush global)
# Necessary IPv4 ICMP types
pass in on $if_wan inet proto icmp from any to ($if_wan) \
    icmp-type { echoreq unreach redir timex paramprob } keep state
# Allow inbound connections on certain TCP and UDP ports
pass in on $if_wan inet proto tcp from any to ($if_wan) \
    port $ports_in_tcp modulate state flags S/SFRA
pass in on $if_wan inet proto udp from any to ($if_wan) \
    port $ports_in_udp keep state
block drop in on $if_wan inet from <martians> to any

## Egress
pass out on $if_wan inet from ($if_wan) to any modulate state \
    flags S/SA
block return out log on $if_wan inet from any to <martians>
pass out on $if_wan inet from any to $host_modem

### LAN interface ###

## Ingress
# Allow DHCP requests
pass in quick on $if_lan inet proto udp from { 0.0.0.0 $net_lan } \
    port 68 to { ($if_lan) 255.255.255.255 } port 67
# Just to make sure we don't accidentally lock ourselves out of SSH
pass in quick on $if_lan inet proto tcp from any to (self) port ssh \
    keep state flags S/SA
pass in on $if_lan
# Redirect outbound FTP connections through ftp-proxy
pass in on $if_lan inet proto tcp to port ftp rdr-to 127.0.0.1 port 8021

## Egress
pass out on $if_lan

### Tun interfaces ###

## Ingress
pass in on $if_tun

## Egress
pass out on $if_tun
